B638H7L@D2NPF764NTMBP test % terraform init                    
Initializing modules...
- ecs in ../../modules/ecs
- sg in ../../modules/sg
- vpc in ../../modules/vpc

Initializing the backend...

Initializing provider plugins...
- Finding kreuzwerker/docker versions matching "~> 2.20.0"...
- Finding hashicorp/aws versions matching "~> 4.0"...
- Installing kreuzwerker/docker v2.20.3...
- Installed kreuzwerker/docker v2.20.3 (self-signed, key ID BD080C4571C6104C)
- Installing hashicorp/aws v4.48.0...
- Installed hashicorp/aws v4.48.0 (signed by HashiCorp)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % terraform fmt 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % terraform validate     
Success! The configuration is valid.

B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % terraform plan    

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.ecs.aws_ecs_cluster.cluster will be created
  + resource "aws_ecs_cluster" "cluster" {
      + arn                = (known after apply)
      + capacity_providers = (known after apply)
      + id                 = (known after apply)
      + name               = "cluster"
      + tags_all           = (known after apply)

      + default_capacity_provider_strategy {
          + base              = (known after apply)
          + capacity_provider = (known after apply)
          + weight            = (known after apply)
        }

      + setting {
          + name  = "containerInsights"
          + value = "enabled"
        }
    }

  # module.ecs.aws_ecs_service.service will be created
  + resource "aws_ecs_service" "service" {
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 1
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "service"
      + platform_version                   = "LATEST"
      + scheduling_strategy                = "REPLICA"
      + tags_all                           = (known after apply)
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + network_configuration {
          + assign_public_ip = true
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.ecs.aws_ecs_task_definition.task will be created
  + resource "aws_ecs_task_definition" "task" {
      + arn                      = (known after apply)
      + container_definitions    = jsonencode(
            [
              + {
                  + cpu          = 512
                  + essential    = true
                  + image        = "nginx:1.23.1"
                  + memory       = 2048
                  + name         = "nginx"
                  + portMappings = [
                      + {
                          + containerPort = 80
                          + hostPort      = 80
                        },
                    ]
                },
            ]
        )
      + cpu                      = "512"
      + family                   = "service"
      + id                       = (known after apply)
      + memory                   = "2048"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "EC2",
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags_all                 = (known after apply)
    }

  # module.sg.aws_security_group.sg will be created
  + resource "aws_security_group" "sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "http"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "ecs-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "igw"
        }
      + tags_all = {
          + "Name" = "igw"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route_table.rt will be created
  + resource "aws_route_table" "rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.subnet_route will be created
  + resource "aws_route_table_association" "subnet_route" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.subnet will be created
  + resource "aws_subnet" "subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "name" = "main"
        }
      + tags_all                             = {
          + "name" = "main"
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + aws_ecs_cluster_id      = (known after apply)
  + aws_ecs_cluster_name    = "cluster"
  + aws_security_group_arn  = (known after apply)
  + aws_security_group_id   = (known after apply)
  + aws_security_group_name = "ecs-sg"
  + aws_subnet_id           = (known after apply)
  + aws_vpc_arn             = (known after apply)
  + aws_vpc_id              = (known after apply)

─────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take
exactly these actions if you run "terraform apply" now.
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.ecs.aws_ecs_cluster.cluster will be created
  + resource "aws_ecs_cluster" "cluster" {
      + arn                = (known after apply)
      + capacity_providers = (known after apply)
      + id                 = (known after apply)
      + name               = "cluster"
      + tags_all           = (known after apply)

      + default_capacity_provider_strategy {
          + base              = (known after apply)
          + capacity_provider = (known after apply)
          + weight            = (known after apply)
        }

      + setting {
          + name  = "containerInsights"
          + value = "enabled"
        }
    }

  # module.ecs.aws_ecs_service.service will be created
  + resource "aws_ecs_service" "service" {
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 1
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "service"
      + platform_version                   = "LATEST"
      + scheduling_strategy                = "REPLICA"
      + tags_all                           = (known after apply)
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + network_configuration {
          + assign_public_ip = true
          + security_groups  = (known after apply)
          + subnets          = (known after apply)
        }
    }

  # module.ecs.aws_ecs_task_definition.task will be created
  + resource "aws_ecs_task_definition" "task" {
      + arn                      = (known after apply)
      + container_definitions    = jsonencode(
            [
              + {
                  + cpu          = 512
                  + essential    = true
                  + image        = "nginx:1.23.1"
                  + memory       = 2048
                  + name         = "nginx"
                  + portMappings = [
                      + {
                          + containerPort = 80
                          + hostPort      = 80
                        },
                    ]
                },
            ]
        )
      + cpu                      = "512"
      + family                   = "service"
      + id                       = (known after apply)
      + memory                   = "2048"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "EC2",
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags_all                 = (known after apply)
    }

  # module.sg.aws_security_group.sg will be created
  + resource "aws_security_group" "sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "http"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "ecs-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "igw"
        }
      + tags_all = {
          + "Name" = "igw"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route_table.rt will be created
  + resource "aws_route_table" "rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.subnet_route will be created
  + resource "aws_route_table_association" "subnet_route" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.subnet will be created
  + resource "aws_subnet" "subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "name" = "main"
        }
      + tags_all                             = {
          + "name" = "main"
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + aws_ecs_cluster_id      = (known after apply)
  + aws_ecs_cluster_name    = "cluster"
  + aws_security_group_arn  = (known after apply)
  + aws_security_group_id   = (known after apply)
  + aws_security_group_name = "ecs-sg"
  + aws_subnet_id           = (known after apply)
  + aws_vpc_arn             = (known after apply)
  + aws_vpc_id              = (known after apply)
module.ecs.aws_ecs_cluster.cluster: Creating...
module.vpc.aws_vpc.main: Creating...
module.ecs.aws_ecs_task_definition.task: Creating...
module.ecs.aws_ecs_task_definition.task: Creation complete after 1s [id=service]
module.vpc.aws_vpc.main: Creation complete after 2s [id=vpc-01446f7c655881755]
module.vpc.aws_internet_gateway.igw: Creating...
module.vpc.aws_subnet.subnet: Creating...
module.sg.aws_security_group.sg: Creating...
module.vpc.aws_internet_gateway.igw: Creation complete after 0s [id=igw-06a29126cff517d4c]
module.vpc.aws_route_table.rt: Creating...
module.sg.aws_security_group.sg: Creation complete after 2s [id=sg-0c8098749f0d06f62]
module.vpc.aws_route_table.rt: Creation complete after 2s [id=rtb-018a3845d3f698578]
module.ecs.aws_ecs_cluster.cluster: Still creating... [10s elapsed]
module.ecs.aws_ecs_cluster.cluster: Creation complete after 11s [id=arn:aws:ecs:us-east-1:933885060389:cluster/cluster]
module.vpc.aws_subnet.subnet: Still creating... [10s elapsed]
module.vpc.aws_subnet.subnet: Creation complete after 10s [id=subnet-0b9e65397955bf444]
module.vpc.aws_route_table_association.subnet_route: Creating...
module.ecs.aws_ecs_service.service: Creating...
module.vpc.aws_route_table_association.subnet_route: Creation complete after 1s [id=rtbassoc-0171bd74bddbc7695]
module.ecs.aws_ecs_service.service: Creation complete after 1s [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service]

Apply complete! Resources: 9 added, 0 changed, 0 destroyed.

Outputs:

aws_ecs_cluster_id = "arn:aws:ecs:us-east-1:933885060389:cluster/cluster"
aws_ecs_cluster_name = "cluster"
aws_security_group_arn = "arn:aws:ec2:us-east-1:933885060389:security-group/sg-0c8098749f0d06f62"
aws_security_group_id = "sg-0c8098749f0d06f62"
aws_security_group_name = "ecs-sg"
aws_subnet_id = "subnet-0b9e65397955bf444"
aws_vpc_arn = "arn:aws:ec2:us-east-1:933885060389:vpc/vpc-01446f7c655881755"
aws_vpc_id = "vpc-01446f7c655881755"
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % ls -la
total 72
drwxr-xr-x  9 B638H7L  staff    288 Dec 29 00:00 .
drwxr-xr-x  3 B638H7L  staff     96 Dec 28 23:32 ..
drwxr-xr-x  4 B638H7L  staff    128 Dec 28 23:59 .terraform
-rw-r--r--  1 B638H7L  staff   2638 Dec 28 23:59 .terraform.lock.hcl
-rw-r--r--  1 B638H7L  staff    324 Dec 28 23:57 main.tf
-rw-r--r--  1 B638H7L  staff   1019 Dec 28 23:57 outputs.tf
-rw-r--r--  1 B638H7L  staff    388 Dec 28 23:32 provider.tf
-rw-r--r--  1 B638H7L  staff  14714 Dec 29 00:00 terraform.tfstate
-rw-r--r--  1 B638H7L  staff    458 Dec 28 23:32 variables.tf
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % terraform destroy -auto-approve
module.ecs.aws_ecs_cluster.cluster: Refreshing state... [id=arn:aws:ecs:us-east-1:933885060389:cluster/cluster]
module.vpc.aws_vpc.main: Refreshing state... [id=vpc-01446f7c655881755]
module.ecs.aws_ecs_task_definition.task: Refreshing state... [id=service]
module.vpc.aws_internet_gateway.igw: Refreshing state... [id=igw-06a29126cff517d4c]
module.vpc.aws_subnet.subnet: Refreshing state... [id=subnet-0b9e65397955bf444]
module.sg.aws_security_group.sg: Refreshing state... [id=sg-0c8098749f0d06f62]
module.vpc.aws_route_table.rt: Refreshing state... [id=rtb-018a3845d3f698578]
module.ecs.aws_ecs_service.service: Refreshing state... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service]
module.vpc.aws_route_table_association.subnet_route: Refreshing state... [id=rtbassoc-0171bd74bddbc7695]

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # module.ecs.aws_ecs_cluster.cluster will be destroyed
  - resource "aws_ecs_cluster" "cluster" {
      - arn                = "arn:aws:ecs:us-east-1:933885060389:cluster/cluster" -> null
      - capacity_providers = [] -> null
      - id                 = "arn:aws:ecs:us-east-1:933885060389:cluster/cluster" -> null
      - name               = "cluster" -> null
      - tags               = {} -> null
      - tags_all           = {} -> null

      - setting {
          - name  = "containerInsights" -> null
          - value = "enabled" -> null
        }
    }

  # module.ecs.aws_ecs_service.service will be destroyed
  - resource "aws_ecs_service" "service" {
      - cluster                            = "arn:aws:ecs:us-east-1:933885060389:cluster/cluster" -> null
      - deployment_maximum_percent         = 200 -> null
      - deployment_minimum_healthy_percent = 100 -> null
      - desired_count                      = 1 -> null
      - enable_ecs_managed_tags            = false -> null
      - enable_execute_command             = false -> null
      - health_check_grace_period_seconds  = 0 -> null
      - iam_role                           = "aws-service-role" -> null
      - id                                 = "arn:aws:ecs:us-east-1:933885060389:service/cluster/service" -> null
      - launch_type                        = "FARGATE" -> null
      - name                               = "service" -> null
      - platform_version                   = "LATEST" -> null
      - propagate_tags                     = "NONE" -> null
      - scheduling_strategy                = "REPLICA" -> null
      - tags                               = {} -> null
      - tags_all                           = {} -> null
      - task_definition                    = "service:1" -> null
      - triggers                           = {} -> null
      - wait_for_steady_state              = false -> null

      - deployment_circuit_breaker {
          - enable   = false -> null
          - rollback = false -> null
        }

      - deployment_controller {
          - type = "ECS" -> null
        }

      - network_configuration {
          - assign_public_ip = true -> null
          - security_groups  = [
              - "sg-0c8098749f0d06f62",
            ] -> null
          - subnets          = [
              - "subnet-0b9e65397955bf444",
            ] -> null
        }
    }

  # module.ecs.aws_ecs_task_definition.task will be destroyed
  - resource "aws_ecs_task_definition" "task" {
      - arn                      = "arn:aws:ecs:us-east-1:933885060389:task-definition/service:1" -> null
      - container_definitions    = jsonencode(
            [
              - {
                  - cpu          = 512
                  - environment  = []
                  - essential    = true
                  - image        = "nginx:1.23.1"
                  - memory       = 2048
                  - mountPoints  = []
                  - name         = "nginx"
                  - portMappings = [
                      - {
                          - containerPort = 80
                          - hostPort      = 80
                          - protocol      = "tcp"
                        },
                    ]
                  - volumesFrom  = []
                },
            ]
        ) -> null
      - cpu                      = "512" -> null
      - family                   = "service" -> null
      - id                       = "service" -> null
      - memory                   = "2048" -> null
      - network_mode             = "awsvpc" -> null
      - requires_compatibilities = [
          - "EC2",
          - "FARGATE",
        ] -> null
      - revision                 = 1 -> null
      - skip_destroy             = false -> null
      - tags                     = {} -> null
      - tags_all                 = {} -> null
    }

  # module.sg.aws_security_group.sg will be destroyed
  - resource "aws_security_group" "sg" {
      - arn                    = "arn:aws:ec2:us-east-1:933885060389:security-group/sg-0c8098749f0d06f62" -> null
      - description            = "Managed by Terraform" -> null
      - egress                 = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
            },
        ] -> null
      - id                     = "sg-0c8098749f0d06f62" -> null
      - ingress                = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "http"
              - from_port        = 80
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 80
            },
        ] -> null
      - name                   = "ecs-sg" -> null
      - owner_id               = "933885060389" -> null
      - revoke_rules_on_delete = false -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
      - vpc_id                 = "vpc-01446f7c655881755" -> null
    }

  # module.vpc.aws_internet_gateway.igw will be destroyed
  - resource "aws_internet_gateway" "igw" {
      - arn      = "arn:aws:ec2:us-east-1:933885060389:internet-gateway/igw-06a29126cff517d4c" -> null
      - id       = "igw-06a29126cff517d4c" -> null
      - owner_id = "933885060389" -> null
      - tags     = {
          - "Name" = "igw"
        } -> null
      - tags_all = {
          - "Name" = "igw"
        } -> null
      - vpc_id   = "vpc-01446f7c655881755" -> null
    }

  # module.vpc.aws_route_table.rt will be destroyed
  - resource "aws_route_table" "rt" {
      - arn              = "arn:aws:ec2:us-east-1:933885060389:route-table/rtb-018a3845d3f698578" -> null
      - id               = "rtb-018a3845d3f698578" -> null
      - owner_id         = "933885060389" -> null
      - propagating_vgws = [] -> null
      - route            = [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - core_network_arn           = ""
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = "igw-06a29126cff517d4c"
              - instance_id                = ""
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = ""
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ] -> null
      - tags             = {} -> null
      - tags_all         = {} -> null
      - vpc_id           = "vpc-01446f7c655881755" -> null
    }

  # module.vpc.aws_route_table_association.subnet_route will be destroyed
  - resource "aws_route_table_association" "subnet_route" {
      - id             = "rtbassoc-0171bd74bddbc7695" -> null
      - route_table_id = "rtb-018a3845d3f698578" -> null
      - subnet_id      = "subnet-0b9e65397955bf444" -> null
    }

  # module.vpc.aws_subnet.subnet will be destroyed
  - resource "aws_subnet" "subnet" {
      - arn                                            = "arn:aws:ec2:us-east-1:933885060389:subnet/subnet-0b9e65397955bf444" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1a" -> null
      - availability_zone_id                           = "use1-az2" -> null
      - cidr_block                                     = "10.0.1.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0b9e65397955bf444" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = true -> null
      - owner_id                                       = "933885060389" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {} -> null
      - tags_all                                       = {} -> null
      - vpc_id                                         = "vpc-01446f7c655881755" -> null
    }

  # module.vpc.aws_vpc.main will be destroyed
  - resource "aws_vpc" "main" {
      - arn                                  = "arn:aws:ec2:us-east-1:933885060389:vpc/vpc-01446f7c655881755" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.0.0.0/16" -> null
      - default_network_acl_id               = "acl-020b289df0cf7e2c1" -> null
      - default_route_table_id               = "rtb-0e4d6d8d10c8a19f9" -> null
      - default_security_group_id            = "sg-00251973c161f0813" -> null
      - dhcp_options_id                      = "dopt-0af7d4b9e62a4cd67" -> null
      - enable_classiclink                   = false -> null
      - enable_classiclink_dns_support       = false -> null
      - enable_dns_hostnames                 = false -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-01446f7c655881755" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-0e4d6d8d10c8a19f9" -> null
      - owner_id                             = "933885060389" -> null
      - tags                                 = {
          - "name" = "main"
        } -> null
      - tags_all                             = {
          - "name" = "main"
        } -> null
    }

Plan: 0 to add, 0 to change, 9 to destroy.

Changes to Outputs:
  - aws_ecs_cluster_id      = "arn:aws:ecs:us-east-1:933885060389:cluster/cluster" -> null
  - aws_ecs_cluster_name    = "cluster" -> null
  - aws_security_group_arn  = "arn:aws:ec2:us-east-1:933885060389:security-group/sg-0c8098749f0d06f62" -> null
  - aws_security_group_id   = "sg-0c8098749f0d06f62" -> null
  - aws_security_group_name = "ecs-sg" -> null
  - aws_subnet_id           = "subnet-0b9e65397955bf444" -> null
  - aws_vpc_arn             = "arn:aws:ec2:us-east-1:933885060389:vpc/vpc-01446f7c655881755" -> null
  - aws_vpc_id              = "vpc-01446f7c655881755" -> null
module.vpc.aws_route_table_association.subnet_route: Destroying... [id=rtbassoc-0171bd74bddbc7695]
module.ecs.aws_ecs_service.service: Destroying... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service]
module.vpc.aws_route_table_association.subnet_route: Still destroying... [id=rtbassoc-0171bd74bddbc7695, 10s elapsed]
module.ecs.aws_ecs_service.service: Still destroying... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service, 10s elapsed]
module.vpc.aws_route_table_association.subnet_route: Still destroying... [id=rtbassoc-0171bd74bddbc7695, 20s elapsed]
module.ecs.aws_ecs_service.service: Still destroying... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service, 20s elapsed]
module.ecs.aws_ecs_service.service: Still destroying... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service, 30s elapsed]
module.vpc.aws_route_table_association.subnet_route: Still destroying... [id=rtbassoc-0171bd74bddbc7695, 30s elapsed]
module.ecs.aws_ecs_service.service: Still destroying... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service, 40s elapsed]
module.vpc.aws_route_table_association.subnet_route: Still destroying... [id=rtbassoc-0171bd74bddbc7695, 40s elapsed]
module.ecs.aws_ecs_service.service: Still destroying... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service, 50s elapsed]
module.vpc.aws_route_table_association.subnet_route: Still destroying... [id=rtbassoc-0171bd74bddbc7695, 50s elapsed]
module.vpc.aws_route_table_association.subnet_route: Destruction complete after 53s
module.vpc.aws_route_table.rt: Destroying... [id=rtb-018a3845d3f698578]
module.vpc.aws_route_table.rt: Destruction complete after 1s
module.vpc.aws_internet_gateway.igw: Destroying... [id=igw-06a29126cff517d4c]
module.vpc.aws_internet_gateway.igw: Destruction complete after 5s
module.ecs.aws_ecs_service.service: Still destroying... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service, 1m0s elapsed]
module.ecs.aws_ecs_service.service: Still destroying... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service, 1m10s elapsed]
module.ecs.aws_ecs_service.service: Still destroying... [id=arn:aws:ecs:us-east-1:933885060389:service/cluster/service, 1m20s elapsed]
module.ecs.aws_ecs_service.service: Destruction complete after 1m27s
module.vpc.aws_subnet.subnet: Destroying... [id=subnet-0b9e65397955bf444]
module.ecs.aws_ecs_cluster.cluster: Destroying... [id=arn:aws:ecs:us-east-1:933885060389:cluster/cluster]
module.ecs.aws_ecs_task_definition.task: Destroying... [id=service]
module.sg.aws_security_group.sg: Destroying... [id=sg-0c8098749f0d06f62]
module.ecs.aws_ecs_task_definition.task: Destruction complete after 0s
module.ecs.aws_ecs_cluster.cluster: Destruction complete after 0s
module.vpc.aws_subnet.subnet: Destruction complete after 1s
module.sg.aws_security_group.sg: Destruction complete after 1s
module.vpc.aws_vpc.main: Destroying... [id=vpc-01446f7c655881755]
module.vpc.aws_vpc.main: Destruction complete after 1s

Destroy complete! Resources: 9 destroyed.
B638H7L@D2NPF764NTMBP test % 
B638H7L@D2NPF764NTMBP test % 